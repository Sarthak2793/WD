Module (JAVASCRIPT BASIC & DOM) – 4 
(Basic logic Question) 

1)  What is JavaScript. How to use it? 

Ans - JavaScript is a lightweight, cross-platform, single-threaded, and interpreted compiled programming language.
         It is also known as the scripting language for webpages.JavaScript can be used for Client-side developments
         as well as Server-side developments.
       - Javascript can be used in 2 ways :
         1. Internal (Written between the <script></script> tags, and can be placed in body or head tags.)
         2. External (An external .js file is included in the head section as link.)

2)  How many type of Variable in JavaScript?

Ans - There are 3 types of variables in javascript : var, let and const.
          1. var : can be redeclared and reassigned
          2. let : can be reassigned to other values, but they cannot be redeclared.
          3. const : can't be redeclared or reassigned once done previously.

3)  Define a Data Types in js?

Ans - Data types in JavaScript define the data type that a variable can store.
         JavaScript has 8 Datatypes :
         1. String
         2. Number
         3. Bigint
         4. Boolean
         5. Undefined
         6. Null
         7. Symbol
         8. Object

4)  Write a mul Function Which will Work Properly When invoked With Following Syntax.

Ans - <body>
    <p id="demo"></p>
    <script>
      function mul(a, b) {
        return a * b;
      }
      document.getElementById("demo").innerHTML = mul(10, 2);
    </script>
  </body>

5)  What the difference between undefined and undeclare in JavaScript?

Ans - undefined : It is a data type in JavaScript that represents the absence of a value. When a variable is declared but not assigned a value.
                          it is automatically assigned the value undefined.
	          Ex - let x;
                                 console.log(x); // Output: undefined

         undeclared : An undeclared variable is one that has been referenced without being previously declared with var, let, or const.
                            Accessing an undeclared variable results in a ReferenceError.
	          Ex - console.log(y); // ReferenceError: y is not defined

6) Using console.log() print out the following statement: The quote 'There is no exercise better for the heart than reaching down and lifting people up.' by John Holmes.
    Using console.log() print out the following quote by Mother Teresa.

Ans - <script>
      console.log(
        "The quote 'There is no exercise better for the heart than reaching down and lifting people up.' by John Holmes"
      );

      console.log(
        "The quote 'There is no exercise better for the heart than reaching down and lifting people up.' by Mother Teressa"
      );
    </script>

7) Check if typeof '10' is exactly equal to 10. If not make it exactly equal?

Ans - <script>
      var x = "10";
      if (typeof x !== typeof 10) {
        x = Number(10);
      }
      console.log(x === 10);
    </script>

8) Write a JavaScript Program to find the area of a triangle?

Ans - <script>
      function TriangleArea(base, height) {
        return (base * height) / 2;
      }
      var area = TriangleArea(10, 8);
      console.log("The area of the triangle is: " + area);
    </script>

9) Write a JavaScript program to calculate days left until next Christmas?

Ans - <script>
      let today = new Date();
      let christmasYear = today.getFullYear();

      if (today.getMonth() == 11 && today.getDate() > 25) {
        christmasYear = christmasYear + 1;
      }

      let christmasDate = new Date(christmasYear, 11, 25);

      let dayMilliseconds = 1000 * 60 * 60 * 24;

      let remainingDays = Math.ceil(
        (christmasDate.getTime() - today.getTime()) / dayMilliseconds
      );

      document.write(
        "There are " + remainingDays + " days remaining until Christmas."
      );
    </script>

10) What is Condition Statement?

Ans - Conditional statements are used to perform different actions based on different conditions.
         (Ex - if... , else... , else if... and switch)

11) Find perimeter of Rectangle formula : C = 4 * a ?

Ans - <script>
      var sideLength = 10;
      var perimeter = PerimeterOfSquare(sideLength);
      function PerimeterOfSquare(sideLength) {
        return 4 * sideLength;
      }
      console.log("Perimeter of the square:", perimeter);
    </script>

12) Write a program to convert years into days and days into years? 

Ans - <script>
      function yearsToDays(years) {
        return years * 365;
      }

      function daysToYears(days) {
        return days / 365;
      }

      var years = 3;
      var daysEquivalent = yearsToDays(years);
      console.log(years + " years is equal to " + daysEquivalent + " days.");

      var days = 1095;
      var yearsEquivalent = daysToYears(days);
      console.log(days + " days is equal to " + yearsEquivalent + " years.");
    </script>

13) Convert temperature Fahrenheit to Celsius.

Ans - <script>
      function fahrenheitToCelsius(fahrenheit) {
        return (5 / 9) * (fahrenheit - 32);
      }
      var fahrenheit = 101;
      var celsius = fahrenheitToCelsius(fahrenheit);
      console.log(
        fahrenheit +
          " degrees Fahrenheit is equal to " +
          celsius +
          " degrees Celsius."
      );
    </script>

14)  Write a JavaScript exercise to get the extension of a filename.

Ans - <script>
      function getFileExtension(filename) {
        const extension = filename.split(".").pop();
        return extension;
      }

      const result1 = getFileExtension("module.js");
      console.log("The extension of module.js file is : ", result1);

      const result2 = getFileExtension("module.html");
      console.log("The extension of module.html file is : ", result2);
    </script>

15)  What is the result of the expression (5 > 3 && 2 < 4)?

Ans - This expression uses the logical AND operator &&, which returns true if both of its operands are true.
         In this case, 5 > 3 evaluates to true, and 2 < 4 also evaluates to true, so the entire expression evaluates to true.

16)  What is the result of the expression (true && 1 && "hello")?

Ans - Here true, 1 and hello all are truthy values. Since all the operands are truthy, the expression will return the last value which is "hello".
         So, the result of (true && 1 && "hello") is 'hello'.

17)  What is the result of the expression true && false || false && true?

Ans - Here, true && false: The && operator returns false because one of the operands (false) is false.(same for false && true).
         And for false || false: The || operator returns false because both operands (false and false) are false.
         So, the result of true && false || false && true will be 'false'.

18)  What is a Loop and Switch Case in JavaScript define that ?

Ans - Loop : Loops are used in JavaScript to perform repeated tasks based on a condition. Conditions typically return true or false.
         A loop will continue running until the defined condition returns false. (Ex : for, while, do/while etc).
         
         For loop :
         
         <p id="demo"></p>
         <script>
	var i = 5;
	for (var i = 0; i < 10; i++) {
 	 // some statements
	}
	document.getElementById("demo").innerHTML = i;
         </script>

         Switch : A switch case statement in JavaScript provides a way to execute different code blocks based on different conditions.
         It is an alternative to multiple if...else statements when you have multiple conditions to check.

         Switch case : 

        let fruit = 'apple';

        switch (fruit) {
        	case 'banana':
        	     console.log('Banana is yellow.');
        	     break;
        	case 'apple':
                     console.log('Apple is red.');
        	     break;
        	default:
        	     console.log('Unknown fruit.');
         }

19)  What is the use of is Nan function?

Ans - In JavaScript NaN is short for "Not-a-Number". The isNaN() method returns true if a value is NaN. The isNaN() method converts the value to a number before testing it.

         <p id="demo"></p>

         <script>
	let text = "Hello";
	document.getElementById("demo").innerHTML = isNaN(text);   // Here the output will be true.
         </script>

20)  What is the difference between && and || in JavaScript?

Ans - && : It returns true if both operands are true; otherwise, it returns false.
         true && true	      true
         true && false	     false
         false && true	     false
         false && false	     false

         | | : It returns true if at least one of the operands is true; otherwise, it returns false.
         true | | true	      true
         true | | false	      true 
         false | | true	      true 
         false | | false	      false

21)  What is the use of Void (0)?

Ans - The void operator evaluates an expression and returns undefined. By running void(0) in the URL JavaScript code, nothing is evaluated or returned.
         Ex : <a href="javascript:void(0)" onclick="showPopup();return false;">Show Popup</a>
         In the above example, void(0) prevents the page from refreshing when the hyperlink is clicked, and instead, a popup window is displayed.

22)  Check Number Is Positive or Negative in JavaScript?

Ans - function checkNumber(num) {
    	if (num > 0) {
        	     console.log("The number is positive.");
    	} else if (num < 0) {
       	     console.log("The number is negative.");
    	} 
         }

checkNumber(5);    // Output: "The number is positive."
checkNumber(-3);   // Output: "The number is negative."

23)  Find the Character Is Vowel or Not ?

Ans - function isVowel(char) {

         char = char.toLowerCase();
    
         if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {
         	return true;
        } else {
        	return false;
    }
}

console.log(isVowel('a')); // Output: true
console.log(isVowel('b')); // Output: false
console.log(isVowel('E')); // Output: true
console.log(isVowel('x')); // Output: false

24)  Write to check whether a number is negative, positive or zero?

Ans - function checkNumber(num) {
    	if (num > 0) {
        	     console.log("The number is positive.");
    	} else if (num < 0) {
       	     console.log("The number is negative.");
    	} else {
 	     console.log("The number is zero.");
         }

checkNumber(5);    // Output: "The number is positive."
checkNumber(-3);   // Output: "The number is negative."
checkNumber(0);    // Output: "The number is zero."

25)  Write to find number is even or odd using ternary operator in JS?

Ans - function EvenOrOdd(number) {
    	return number % 2 === 0 ? 'Even' : 'Odd';
         }

console.log(EvenOrOdd(4)); // Output: "Even"
console.log(EvenOrOdd(7)); // Output: "Odd"

26)  Write find maximum number among 3 numbers using ternary operator in JS?

Ans - var n1 = 5, n2 = 10, n3 = 15, max;
         max = (n1 > n2) ? 
                   (n1 > n3 ? n1 : n3) : 
                   (n2 > n3 ? n2 : n3);
       
        document.write( "Maximum number among " + n1 + ", " + n2 + " and " + n3 + " is " + max);

27)  Write to find minimum number among 3 numbers using ternary operator in JS?

Ans - var n1 = 50, n2 = 77, n3 = 33, min;
         min = (n1 > n2) ? 
                   (n1 > n3 ? n1 : n3) : 
                   (n2 > n3 ? n2 : n3);
       
        document.write( "Minimum number among " + n1 + ", " + n2 + " and " + n3 + " is " + min);

28)  Write to find the largest of three numbers in JS?

Ans -
      function LargestNum(num1, num2, num3) {
        if (num1 >= num2 && num1 >= num3) {
          return num1;
        } else if (num2 >= num1 && num2 >= num3) {
          return num2;
        } else {
          return num3;
        }
      }

      var largestNumber = LargestNum(10, 15, 18);
      document.write("Largest number:", largestNumber);

29)  Write to show  i. Monday to Sunday using switch case in JS?  ii. Vowel or Consonant using switch case in JS? 

Ans - Monday to Sunday :
	
      var day = 3;

      switch (day) {
        case 1:
          console.log("Monday");
          break;
        case 2:
          console.log("Tuesday");
          break;
        case 3:
          console.log("Wednesday");
          break;
        case 4:
          console.log("Thursday");
          break;
        case 5:
          console.log("Friday");
          break;
        case 6:
          console.log("Saturday");
          break;
        case 7:
          console.log("Sunday");
          break;
        default:
          console.log("Invalid day");
          break;
      }

Ans - Vowel or Consonent :

      var letter = "u";

      switch (letter.toLowerCase()) {
        case "a":
          console.log("Vowel");
          break;
        case "e":
          console.log("Vowel");
          break;
        case "i":
          console.log("Vowel");
          break;
        case "o":
          console.log("Vowel");
          break;
        case "u":
          console.log("Vowel");
          break;
        default:
          console.log("Consonent");
          break;
      }

30)  What are the looping structures in JavaScript? Any one Example?

Ans - Looping structures in javascript allows you to execute a block of code repeatedly. 
         (Ex : for loop, while loop, do-while loop, for...in loop, for...of loop)

         For loop : 
  
         for(var i = 1 ; i <= 5 ; i++){    // Here the loop will continue to run until value of i reaches to 5.
              console.log(i);
         }

31)  Write a print 972 to 897 using for loop in JS?

Ans - for (let i = 972; i >= 897; i--) {
             document.write(i + "<br>");
         }

32)  Write to print factorial of given number?

Ans - let n = 5; 
 
  function factorial(n) { 
        let ans = 1; 
     
        if(n === 0){
             return 1;
        }
        for (let i = 2; i <= n; i++){
             ans = ans * i;
        } 
        return ans; 
  }
 
  document.write(factorial(n));

33)  Write to print Fibonacci series up to given numbers?

Ans - function fibonacci(num) {
        let num1 = 0;
        let num2 = 1;
        let sum;
        let i = 0;
        for (i = 0; i < num; i++) {
          sum = num1 + num2;
          num1 = num2;
          num2 = sum;
        }
        return num2;
      }

      document.write("Fibonacci(5): " + fibonacci(5) + "<br>");
      document.write("Fibonacci(8): " + fibonacci(8));

34)  Write to print number in reverse order e.g.: number = 64728 ---> reverse =82746 in JS?

Ans - let num1 = 123456789;
         let result = num1.toString().split("").reverse().join("");
         // num1.toString() - converts the number into a string : "123456789"
         // split("") - converts the whole string into an individual array elements ["1","2","3","4","5","6","7","8","9"]
         // reverse() - reverses the order of the elements in this array ["9","8","7","6","5","4","3","2","1"]
         // join() - joins the elements of the array back into a string : "987654321"
         document.write(result);

35)  Write a program make a summation of given number (E.g., 1523 Ans: - 11) in JS?

Ans - function Sum(num) {
            var sum = 0;
            for (let i = 0; i < num.length; i++) {
          	sum = sum + num[i];
            }
        	return sum;
           }

      var num = [1, 2, 3, 4];
      var totalSum = Sum(num);
      document.write("The sum of numbers is:", totalSum);

36)   Write a program you have to make a summation of first and last Digit in JS? 

Ans - function sumFirstAndLast(number) {
        var numString = number.toString();

        var firstDigit = parseInt(numString[0]);

        var lastDigit = parseInt(numString[numString.length - 1]);

        return firstDigit + lastDigit;
      }

      var number = 2711993;
      var result = sumFirstAndLast(number);
      document.write("Sum of first and last digits:", result);

Q.38 Use pattern in console.log in JS?
 
   1  
   1 0  
   1 0 1  
   1 0 1 0   
   1 0 1 0 1 

Ans - function printPattern(rows) {
        for (let i = 1; i <= rows; i++) {
          let row = "";
          for (let j = 1; j <= i; j++) {
            row += j % 2 === 0 ? "0" : "1";
            row += " ";
          }
          console.log(row.trim());
        }
      }

      const rows = 5;
      printPattern(rows);


   A  
   B C 
   D E F  
   G H I J  
   K L M N O

Ans - function printPattern(rows) {
        let charCode = 64;
        for (let i = 1; i <= rows; i++) {
          let row = "";
          for (let j = 1; j <= i; j++) {
            charCode++;
            row += String.fromCharCode(charCode) + " ";
          }
          console.log(row.trim());
        }
      }

      const rows = 5;
      printPattern(rows);


  1   
  2 3  
  4 5 6  
  7 8 9 10  
  11 12 13 14 15 

Ans - function printPattern(rows) {
        let startingNumber = 1;
        for (let i = 1; i <= rows; i++) {
          let row = "";
          for (let j = 1; j <= i; j++) {
            row += startingNumber + " ";
            startingNumber++;
          }
          console.log(row.trim());
        }
      }

      const rows = 5;
      printPattern(rows);


  *  
  * *  
  * * *  
  * * * *  
  * * * * *

Ans - function printPattern(rows) {
        for (let i = 1; i <= rows; i++) {
          let row = "";
          for (let j = 1; j <= i; j++) {
            row += "* ";
          }
          console.log(row.trim());
        }
      }

      const rows = 5;
      printPattern(rows);

39)  Accept 3 numbers from user using while loop and check each numbers palindrome?

Ans - function isPalindrome(num) {
        return num.toString() === num.toString().split("").reverse().join("");
      }

      function main() {
        let count = 1;
        while (count <= 3) {
          let number = parseInt(prompt(`Enter number ${count}:`));
          if (!isNaN(number)) {
            if (isPalindrome(number)) {
              console.log(`${number} is a palindrome.`);
            } else {
              console.log(`${number} is not a palindrome.`);
            }
            count++;
          } else {
            alert("Please enter a valid number.");
          }
        }
      }

      main();

40)   Write a JavaScript Program to display the current day and time in the following format. Sample Output: Today is Friday. Current Time is 12 PM: 12 : 22 2 ? 

Ans -  function displayCurrentDayAndTime() {
        var days = [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
        ];
        var currentDate = new Date();
        var dayName = days[currentDate.getDay()];
        var hours = currentDate.getHours() % 12 || 12;
        var minutes = currentDate.getMinutes();
        var ampm = currentDate.getHours() >= 12 ? "PM" : "AM";

        console.log(
          `Today is ${dayName}. Current Time is ${hours} ${ampm}: ${minutes} : ${currentDate.getSeconds()} ${currentDate.getDay()} ?`
        );
      }

      displayCurrentDayAndTime();

41)  Write a JavaScript program to get the current date?

Ans - function CurrentDate() {
        var currentDate = new Date();
        return currentDate.toISOString().slice(0, 10);
      }
      var currentDate = CurrentDate();
      console.log("Current Date:", currentDate);

42)  Write a JavaScript program to compare two objects?

Ans - function compareObjects(obj1, obj2) {
        var keys1 = Object.keys(obj1);
        var keys2 = Object.keys(obj2);

        if (keys1.length !== keys2.length) {
          return false;
        }

        for (var key of keys1) {
          if (obj1[key] !== obj2[key] || !obj2.hasOwnProperty(key)) {
            return false;
          }
        }

        return true;
      }

      var obj1 = { a: 1, b: 2, c: 3 };
      var obj2 = { a: 1, b: 2, c: 3 };
      var obj3 = { a: 1, b: 2, c: 4 };

      console.log(compareObjects(obj1, obj2));
      console.log(compareObjects(obj1, obj3));

43)   Write a JavaScript program to convert an array of objects into CSV string?

Ans - function arrayObjectsToCSV(data) {
        var headers = Object.keys(data[0]);
        var csvRows = data.map((obj) => headers.map((header) => obj[header]));
        csvRows.unshift(headers);
        return csvRows.map((row) => row.join(",")).join("\n");
      }

      var data = [
        { Name: "John", Age: 30, City: "New York" },
        { Name: "Alice", Age: 25, City: "Los Angeles" },
        { Name: "Bob", Age: 35, City: "Chicago" },
      ];

      var csvString = arrayObjectsToCSV(data);
      console.log(csvString);

44)   Write a JavaScript program to capitalize first letter of a string? 

Ans - function capitalize(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
      }

      var inputString = "hello world";

      var capitalizedString = capitalize(inputString);
      console.log(capitalizedString);

45)  Write a JavaScript program to determine if a variable is array? 
 
Ans - function isArray(variable) {
        return Array.isArray(variable);
      }

      const arrayVariable = [1, 2, 3];
      const nonArrayVariable = "Hello";

      console.log(isArray(arrayVariable));
      console.log(isArray(nonArrayVariable));

46)  Write a JavaScript program to clone an array? 

Ans - function cloneArray(array) {
        return [...array];
      }

      var originalArray = [1, 2, 3, 4, 5];

      var clonedArray = cloneArray(originalArray);

      console.log("Original Array:", originalArray);
      console.log("Cloned Array:", clonedArray);

47)  What is the drawback of declaring methods directly in JavaScript objects? 

Ans - Performance -	Less efficient due to multiple copies of the function.
         Reusability -	Limited reusability as methods are specific to the object.
         Inheritance - Modifications don't propagate to child objects.
         Memory Usage - Increased memory usage with many object instances.

48)   Print the length of the string on the browser console using console.log()? 

Ans - var str = "Hello World!";
         console.log(str.length);

49)  Change all the string characters to capital letters using toUpperCase() method? 

Ans - var str = "hello world!";
      var strInUpperCase = str.toUpperCase();
      console.log(strInUpperCase);

50)  What is the drawback of declaring methods directly in JavaScript objects?

Ans - Performance -	Less efficient due to multiple copies of the function.
         Reusability -	Limited reusability as methods are specific to the object.
         Inheritance - Modifications don't propagate to child objects.
         Memory Usage - Increased memory usage with many object instances.

51)  Write a JavaScript program to get the current date. Expected Output : mm-dd-yyyy, mm/dd/yyyy or dd-mm-yyyy, dd/mm/yyyy?

Ans - function getCurrentDate() {
        var currentDate = new Date();
        var month = ("0" + (currentDate.getMonth() + 1)).slice(-2);
        var day = ("0" + currentDate.getDate()).slice(-2);
        var year = currentDate.getFullYear();
        return `${month}-${day}-${year}`;
      }

      console.log("Current Date (mm-dd-yyyy):", getCurrentDate());

52)  Use indexOf to determine the position of the first occurrence of a in 30 Days Of JavaScript? 

Ans - var text = "30 Days Of JavaScript";
      var position = text.indexOf("a");

      console.log("first occurrence of 'a':", position);

53)  Use lastIndexOf to determine the position of the last occurrence of a in 30 Days Of JavaScript? 

Ans - var text = "30 Days Of JavaScript";
      var position = text.lastIndexOf("a");

      console.log("last occurrence of 'a':", position);

54)  Form Validtion in JS? 

Ans - Form validation in JavaScript typically involves checking user input against certain criteria to ensure it meets the required format
         or constraints before submitting the form data to the server. 

55)  Form in Email, number, Password, Validation.

Ans - <form id="myForm">
      <input type="email" id="email" placeholder="Email" required />
      <input
        type="text"
        id="number"
        placeholder="Number"
        required
        pattern="\d+"
      />
      <input type="password" id="password" placeholder="Password" required />
      <input
        type="password"
        id="confirmPassword"
        placeholder="Confirm Password"
        required
      />
      <button type="submit">Submit</button>
    </form>

    <script>
      document
        .getElementById("myForm")
        .addEventListener("submit", function (event) {
          event.preventDefault();

          var email = document.getElementById("email").value;
          var number = document.getElementById("number").value;
          var password = document.getElementById("password").value;
          var confirmPassword =
            document.getElementById("confirmPassword").value;

          if (!validateEmail(email)) {
            alert("Please enter a valid email address.");
            return;
          }

          if (!validateNumber(number)) {
            alert("Please enter a valid number.");
            return;
          }

          if (!validatePassword(password)) {
            alert("Password must be at least 8 characters long.");
            return;
          }

          if (password !== confirmPassword) {
            alert("Passwords do not match.");
            return;
          }

          alert("Form submitted successfully!");
        });

      function validateEmail(email) {
        var emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailPattern.test(email);
      }

      function validateNumber(number) {
        const numberPattern = /^\d+$/;
        return numberPattern.test(number);
      }

      function validatePassword(password) {
        return password.length >= 8;
      }
    </script>

56)  Dynamic Form Validation in JS?

Ans - Dynamic form validation in JavaScript involves validating form fields as the user interacts with them, providing real-time feedback on the validity of their input. 

57)  how many type of JS Event? How to use it?

Ans - Mouse Events: These events are triggered by mouse actions.
         (Ex : click, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout)

         Keyboard Events: These events are triggered by keyboard actions.
         (Ex : keydown, keypress, keyup)

         Form Events: These events are triggered by form element actions.
         (Ex : submit, reset, change, input)

         Focus Events: These events are triggered when an element gains or loses focus.
         (Ex : focus, blur)

         Window Events: These events are triggered by actions related to the browser window.
         (Ex : load, unload, resize, scroll)

         Media Events: These events are triggered by multimedia elements (e.g., <audio>, <video>).
         (Ex : play, pause, ended)

      - To use JavaScript events, you typically attach event handlers to elements using JavaScript. Event handlers are functions that execute when a particular event occurs.

59)  What is Bom vs Dom in JS?

Ans - DOM (Document Object Model):
         The DOM is a programming interface for web documents. It represents the structure of HTML and XML documents as a hierarchical tree structure,
         where each node represents an element, attribute, or text content in the document.

         BOM (Browser Object Model):
         The BOM is a programming interface for web browser functionality that goes beyond the document content. It provides objects and methods for interacting
         with the browser window and its components.

60)  Array vs object differences in JS?

Ans - 

       Ordering	         -           Ordered (numerical indexes)	                                                        Unordered (named properties)
       Accessing Elements    -	      array[index]	                                                                        object.property or object["property"]
       Data Types	         -           Can hold any data type (mixed)	                                        Key-value pairs (any data type)
       Use Cases	         -           Ordered lists, sequences	                                                        Entities, concepts with properties


61)  Split the string into an array using split() Method? 

Ans - var str = "Hello, world!";
         
         var separator = ", ";

         var arrayOfSubstrings = str.split(separator);

         console.log(arrayOfSubstrings);

62)   Check if the string contains a word Script using includes() method? 

Ans - var str = "JavaScript is a scripting language.";
      var word = "Script";

      if (str.includes(word)) {
        console.log(`The string contains the word "${word}".`);
      } else {
        console.log(`The string does not contain the word "${word}".`);
      }

63)  Change all the string characters to lowercase letters using toLowerCase() Method. 

Ans - var str = "Hello, World!";
         var lowercaseStr = str.toLowerCase();
         console.log(lowercaseStr);

64)  What is Character at index 15 in ’30 Days of JavaScript’ string? Use charAt() method.

Ans - var str = "30 Days of JavaScript";
         var characterAtIndex15 = str.charAt(15);
         console.log(characterAtIndex15);

65)  copy to one string to another string in JS?

Ans - var originalString = "This is the original string.";
         var copiedString = originalString;
         console.log(copiedString);

66)  Find the length of a string without using libraryFunction? 

Ans - function getStringLength(str) {
        let length = 0;
        for (let char of str) {
          length++;
        }
        return length;
      }

      var str = "Hello, World!";
      var length = getStringLength(str);

      console.log("Length of the string:", length);










          


         
	